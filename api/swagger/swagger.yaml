swagger: "2.0"
info:
  version: "1.0.5"
  title: CCXT REST
  contact:
    name: "Adroit"
    email: "hello@adroit.ph"
    url: "https://adroit.ph/ccxt-rest-contact-us/"
  license:
    name: "MIT"
    url: "https://github.com/franz-see/ccxt-rest/blob/master/LICENSE.txt"
# during dev, should point to your local machine
host: localhost:3000
# basePath prefixes all resource paths 
basePath: /
# 
tags: 
  - name: Exchange Management API
    description: >-
      APIs that manage [creation](#createexchange) / [deletion](#deleteexchange) / [listing](#listids) / [retrieving](#getone) of exchange instances. 
      

      Before you start using the [Public](#ccxt-rest-public-data-api) and [Private](#ccxt-rest-private-data-api) Data APIs, you would need to create first an exchange instance. 
      You do this by selecting which exchange you want to create an exchange instance of (you can see the list of supported from [`GET:/exchanges`](#list)), and then using that 
      exchange name as part of the path of [`POST:/exchange/{exchangeName}`](#createexchange) in order to create an exchange instance. The body to the API call contains 
      `exchangeId` (_any name you want to use to identify this exchange instance of_), the `apiKey` and `secret` that you got from that exchange's website.


      Once you have an exchange instance, you can then start using that exchange instance to invoke the [Public](#ccxt-rest-public-data-api) and 
      [Private](#ccxt-rest-private-data-api) Data API calls which roughly has a format of `/exchange/{exchangeName}/{exchangeId}/X/Y/Z`.
  - name: Public Data API
    description: APIs that retrieve public data (like ticker, order books, trades, etc)
  - name: Private Data API
    description: APIs that retrieve private data (like your balances, your open orders, your closed orders, your trades, etc)
  - name: Experimental API
    description: APIs that may be useful but are in experimental stage. Some of these APIs may potentially be removed in the future or be moved into one of the previous categories
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /exchanges:
    x-swagger-router-controller: exchanges
    get:
      description: List all support exchanges by this server
      tags:
        - Exchange Management API
      operationId: list
      responses:
        "200":
          description: Success
          schema: 
            type: array
            items: 
              type: string
            example: ["_1btcxe","acx","allcoin","anxpro","anybits","bcex","bequant","bibox","bigone","binance","binanceje","bit2c","bitbank","bitbay","bitfinex","bitfinex2","bitflyer","bitforex","bithumb","bitibu","bitkk","bitlish","bitmarket","bitmex","bitsane","bitso","bitstamp","bitstamp1","bittrex","bitz","bl3p","bleutrade","braziliex","btcalpha","btcbox","btcchina","btcexchange","btcmarkets","btctradeim","btctradeua","btcturk","buda","bxinth","ccex","cex","chbtc","chilebit","cobinhood","coinbase","coinbaseprime","coinbasepro","coincheck","coinegg","coinex","coinexchange","coinfalcon","coinfloor","coingi","coinmarketcap","coinmate","coinnest","coinone","coinspot","cointiger","coolcoin","coss","crex24","crypton","cryptopia","deribit","dsx","ethfinex","exmo","exx","fcoin","fcoinjp","flowbtc","foxbit","fybse","fybsg","gateio","gdax","gemini","getbtc","hadax","hitbtc","hitbtc2","huobipro","huobiru","ice3x","independentreserve","indodax","itbit","jubi","kkex","kraken","kucoin","kucoin2","kuna","lakebtc","lbank","liqui","liquid","livecoin","luno","lykke","mandala","mercado","mixcoins","negociecoins","nova","okcoincny","okcoinusd","okex","paymium","poloniex","quadrigacx","rightbtc","southxchange","stronghold","surbitcoin","theocean","therock","tidebit","tidex","uex","upbit","urdubit","vaultoro","vbtc","virwox","xbtce","yobit","zaif","zb"]
        "500":
          description: If an unexpected error occurred
  /exchange/{exchangeName}:
    x-swagger-router-controller: exchange
    get:
      description: List all exchange instance ids for this exchange
      tags:
        - Exchange Management API
      operationId: listIds
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
      responses:
        "200":
          description: Success
          schema: 
            type: array
            items: 
              type: string
            example: ['myBitsoInstance', 'myBinanceInstance', 'someRandomNameIGaveToAnInstance']
        "404":
          description: Exchange with that name is NOT supported
        "500":
          description: If an unexpected error occurred
    post:
      description: Creates an instance of the exchange
      tags:
        - Exchange Management API
      operationId: createExchange
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - in: body
          name: exchange
          description: The exchange to create.
          schema:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: The unique identifier for this exchange. This would be used as the 'exchangeId' of the other API calls
              apiKey:
                type: string
                description: The API key you got from the exchange itself. This with the secret is what will allow you to access the exchange
              secret:
                type: string
                description: The Secret key you got from the exchange itself. This with the apiKey is what will allow you to access the exchange
              enableRateLimit:
                type: boolean
                enum: [true, false]
                default: true
                description: Whether to enable the built in rate limiter or not. The built in rate limiter is an approximation of the actual exchange's limit. To have a more accurate rate limiting, set this to false and implement the rate limiter on your client
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ExchangeResponse"
        "404":
          description: Exchange with that name is NOT supported
        "500":
          description: If an unexpected error occurred
        "503":
          description: Support for exchange is currently broken
  /exchange/{exchangeName}/{exchangeId}:
    x-swagger-router-controller: exchange
    get:
      description: Get the exchange details given the exchangeName and exchangeId
      tags:
        - Exchange Management API
      operationId: getOne
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ExchangeResponse"
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
    delete:
      description: Delete the exchange details referenced by the exchangeName and exchangeId
      tags:
        - Exchange Management API
      operationId: deleteExchange
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/ExchangeResponse"
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
  /exchange/{exchangeName}/{exchangeId}/markets:
    x-swagger-router-controller: exchange
    get:
      description: Get the markets of the exchange referenced by the exchangeName and exchangeId
      tags:
        - Public Data API
      operationId: markets
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/MarketResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/orderBook:
    x-swagger-router-controller: exchange
    get:
      description: Get the order book of the exchange referenced by the exchangeName, exchangeId and symbol
      tags:
        - Public Data API
      operationId: orderBook
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - $ref: "#/parameters/requiredExchangeSymbolParam"
        - name: limit
          in: query
          description: The limit of the exchange's order book to be retrieved.
          required: false
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/OrderBookResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/l2OrderBook:
    x-swagger-router-controller: exchange
    get:
      description: Get the Level 2 Order Book of the exchange referenced by the exchangeName, exchangeId and symbol
      tags:
        - Public Data API
      operationId: l2OrderBook
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - $ref: "#/parameters/requiredExchangeSymbolParam"
        - name: limit
          in: query
          description: The limit of the exchange's order book to be retrieved.
          required: false
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/OrderBookResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/trades:
    x-swagger-router-controller: exchange
    get:
      description: Get the trades of the exchange referenced by the exchangeName, exchangeId and symbol
      tags:
        - Public Data API
      operationId: trades
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - $ref: "#/parameters/requiredExchangeSymbolParam"
        - name: since
          in: query
          description: Retrieve the trades starting from 'since'
          required: false
          type: string
        - name: limit
          in: query
          description: The limit of the exchange's trades to be retrieved.
          required: false
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TradeResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/ticker:
    x-swagger-router-controller: exchange
    get:
      description: Get the ticker of the exchange referenced by the exchangeName, exchangeId and symbol
      tags:
        - Public Data API
      operationId: ticker
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - $ref: "#/parameters/requiredExchangeSymbolParam"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TickerResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/tickers:
    x-swagger-router-controller: exchange
    get:
      description: Get the tickers of the exchange referenced by the exchangeName, exchangeId and symbol
      tags:
        - Public Data API
      operationId: tickers
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - $ref: "#/parameters/optionalExchangeSymbolParam"
      responses:
        "200":
          description: Success
          schema: 
            type: array
            items: 
              $ref: "#/definitions/TickerResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/balances:
    x-swagger-router-controller: exchange
    get:
      description: Get the balances of the exchange referenced by the exchangeName and exchangeId
      tags:
        - Private Data API
      operationId: balances
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/BalanceResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/orders:
    x-swagger-router-controller: exchange
    get:
      description: Get the orders of the exchange referenced by the exchangeName and exchangeId
      tags:
        - Private Data API
      operationId: fetchOrders
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - $ref: "#/parameters/optionalExchangeSymbolParam"
        - name: since
          in: query
          description: Retrieve the orders starting from 'since'
          required: false
          type: string
        - name: limit
          in: query
          description: The limit of the exchange's orders to be retrieved.
          required: false
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/OrderResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/orders/open:
    x-swagger-router-controller: exchange
    get:
      description: Get the open orders of the exchange referenced by the exchangeName and exchangeId
      tags:
        - Private Data API
      operationId: fetchOpenOrders
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - $ref: "#/parameters/optionalExchangeSymbolParam"
        - name: since
          in: query
          description: Retrieve the orders starting from 'since'
          required: false
          type: string
        - name: limit
          in: query
          description: The limit of the exchange's orders to be retrieved.
          required: false
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/OrderResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/orders/closed:
    x-swagger-router-controller: exchange
    get:
      description: Get the closed orders of the exchange referenced by the exchangeName and exchangeId
      tags:
        - Private Data API
      operationId: fetchClosedOrders
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - $ref: "#/parameters/optionalExchangeSymbolParam"
        - name: since
          in: query
          description: Retrieve the orders starting from 'since'
          required: false
          type: string
        - name: limit
          in: query
          description: The limit of the exchange's orders to be retrieved.
          required: false
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/OrderResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/trades/mine:
    x-swagger-router-controller: exchange
    get:
      description: Get my trades of the exchange referenced by the exchangeName and exchangeId
      tags:
        - Private Data API
      operationId: fetchMyTrades
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - $ref: "#/parameters/optionalExchangeSymbolParam"
        - name: since
          in: query
          description: Retrieve the trades starting from 'since'
          required: false
          type: string
        - name: limit
          in: query
          description: The limit of the exchange's trades to be retrieved.
          required: false
          type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/TradeResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/order:
    x-swagger-router-controller: exchange
    post:
      description: Create an order on the exchange referenced by the exchangeName and exchangeId
      tags:
        - Private Data API
      operationId: createOrder
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - in: body
          name: order
          description: The order to place.
          schema:
            type: object
            required:
              - symbol
              - type
              - side
              - amount
            properties:
              symbol:
                type: string
              type:
                type: string
                enum: [market, limit]
              side:
                type: string
                enum: [buy, sell]
              amount:
                type: number
              price:
                type: number
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/OrderResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/order/{orderId}:
    x-swagger-router-controller: exchange
    get:
      description: Retrieves the informatoin of an order on the exchange referenced by the exchangeName, exchangeId and orderId
      tags:
        - Private Data API
      operationId: fetchOrder
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - $ref: "#/parameters/orderIdParam"
        - $ref: "#/parameters/optionalExchangeSymbolParam"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/OrderResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
    delete:
      description: Cancel an open order on the exchange referenced by the exchangeName, exchangeId and orderId
      tags:
        - Private Data API
      operationId: cancelOrder
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - $ref: "#/parameters/orderIdParam"
        - $ref: "#/parameters/optionalExchangeSymbolParam"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/OrderResponse"
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /exchange/{exchangeName}/{exchangeId}/_/{methodName}:
    x-swagger-router-controller: exchange
    post:
      description: Invokes a ccxt javascript object's method call directly
      consumes:
        - text/plain
      tags:
        - Experimental API
      operationId: directCall
      parameters:
        - $ref: "#/parameters/exchangeNameParam"
        - $ref: "#/parameters/exchangeIdParam"
        - name: methodName
          in: path
          description: The method name of the exchange that would be invoked directly
          required: true
          type: string
        - in: body
          name: methodParams
          description: The stringified array of values that would be passed as parameters to the direct method call
          schema:
            type: string
      responses:
        "200":
          description: Success
          schema:
            type: object
        "400":
          description: If the exchange itself complained about the parameters passed
        "401":
          description: If the exchange integration requires api key and secret for this function
        "403":
          description: If the exchange integration had an authentication issue (most probably nonce error)
        "404":
          description: Exchange with that name is NOT supported or Exchange with that id does NOT exist
        "500":
          description: If an unexpected error occurred
        "501":
          description: If the exchange integration does NOT support this function
        "504":
          description: If the exchange itself could not be reached because of some network error
  /swagger:
    x-swagger-pipe: swagger_raw
parameters:
  exchangeNameParam:
    name: exchangeName
    in: path
    description: The name of the exchange. Possible values are any of the result of GET:/exchanges.
    required: true
    type: string
  exchangeIdParam:
    name: exchangeId
    in: path
    description: The id of the exchange instance. Possible values are any of the result of GET:/exchange/{exchangeName}.
    required: true
    type: string
  requiredExchangeSymbolParam:
    name: symbol
    in: query
    description: The symbol of the exchange's data to be retrieved. Possible values are any of symbols in GET:/exchange/{exchangeName}/{exchangeId}/markets
    required: true
    type: string
  optionalExchangeSymbolParam:
    name: symbol
    in: query
    description: The symbol of the exchange's data to be retrieved. Possible values are any of symbols in GET:/exchange/{exchangeName}/{exchangeId}/markets
    required: false
    type: string
  orderIdParam:
    name: orderId
    in: path
    description: The id of the order. Possible values are any of the result of GET:/exchange/{exchangeName}/{exchangeId}/orders.
    required: true
    type: string
definitions:
  ExchangeCapability:
    type: string
    enum: &ExchangeCapability
      - 'true'
      - 'false'
      - emulated
  OrderType:
    type: string
    enum: &OrderType
      - market
      - limit
  OrderStatus:
    type: string
    enum: &OrderStatus
      - open
      - closed
      - canceled
      - canceling
  Side:
    type: string
    enum: &Side
      - buy
      - sell
  ExchangeResponse:
    required:
      - name
      - enableRateLimit
      - countries
    properties:
      name:
        type: string
        description: The name of the exchange. When you created the exchange (via POST:/exchanges/{exhangeName}), the 'id' parameter there becomes the name here
      enableRateLimit:
        type: boolean
        enum: [true, false]
        default: true
        description: Whether to enable the built in rate limiter or not. The built in rate limiter is an approximation of the actual exchange's limit. To have a more accurate rate limiting, set this to false and implement the rate limiter on your client
      countries:
        type: array
        items: 
          type: string
        description: The list of countries where this exchange is a member of
      rateLimit: 
        type: integer
        description: A request rate limit in milliseconds. Specifies the required minimal delay between two consequent HTTP requests to the same exchange. If enableRateLimit is set to false, this would be ignored.
      twofa:
        type: boolean
        enum: [true, false]
        default: false
        description: Whether to enable two factor authentication or not
      has:
        $ref: '#/definitions/ExchangeHasCapabilities'
        description: List of capabilities this exchange has
      urls:
        type: object
        description: Collection of URLs this exchange has
  ExchangeHasCapabilities:
    required:
      - CORS
      - publicAPI
      - privateAPI
      - cancelOrder
      - cancelOrders
      - createDepositAddress
      - createOrder
      - createMarketOrder
      - createLimitOrder
      - editOrder
      - fetchBalance
      - fetchBidsAsks
      - fetchClosedOrders
      - fetchCurrencies
      - fetchDepositAddress
      - fetchFundingFees
      - fetchL2OrderBook
      - fetchMarkets
      - fetchMyTrades
      - fetchOHLCV
      - fetchOpenOrders
      - fetchOrder
      - fetchOrderBook
      - fetchOrderBooks
      - fetchOrders
      - fetchTicker
      - fetchTickers
      - fetchTrades
      - fetchTradingFees
      - fetchTradingLimits
      - withdraw
    properties:
      CORS:
        type: string
        enum: *ExchangeCapability
      publicAPI:
        type: string
        enum: *ExchangeCapability
      privateAPI:
        type: string
        enum: *ExchangeCapability
      cancelOrder:
        type: string
        enum: *ExchangeCapability
      cancelOrders:
        type: string
        enum: *ExchangeCapability
      createDepositAddress:
        type: string
        enum: *ExchangeCapability
      createOrder:
        type: string
        enum: *ExchangeCapability
      createMarketOrder:
        type: string
        enum: *ExchangeCapability
      createLimitOrder:
        type: string
        enum: *ExchangeCapability
      editOrder:
        type: string
        enum: *ExchangeCapability
      fetchBalance:
        type: string
        enum: *ExchangeCapability
      fetchBidsAsks:
        type: string
        enum: *ExchangeCapability
      fetchClosedOrders:
        type: string
        enum: *ExchangeCapability
      fetchCurrencies:
        type: string
        enum: *ExchangeCapability
      fetchDepositAddress:
        type: string
        enum: *ExchangeCapability
      fetchFundingFees:
        type: string
        enum: *ExchangeCapability
      fetchL2OrderBook:
        type: string
        enum: *ExchangeCapability
      fetchMarkets:
        type: string
        enum: *ExchangeCapability
      fetchMyTrades:
        type: string
        enum: *ExchangeCapability
      fetchOHLCV:
        type: string
        enum: *ExchangeCapability
      fetchOpenOrders:
        type: string
        enum: *ExchangeCapability
      fetchOrder:
        type: string
        enum: *ExchangeCapability
      fetchOrderBook:
        type: string
        enum: *ExchangeCapability
      fetchOrderBooks:
        type: string
        enum: *ExchangeCapability
      fetchOrders:
        type: string
        enum: *ExchangeCapability
      fetchTicker:
        type: string
        enum: *ExchangeCapability
      fetchTickers:
        type: string
        enum: *ExchangeCapability
      fetchTrades:
        type: string
        enum: *ExchangeCapability
      fetchTradingFees:
        type: string
        enum: *ExchangeCapability
      fetchTradingLimits:
        type: string
        enum: *ExchangeCapability
      withdraw:
        type: string
        enum: *ExchangeCapability
  MarketResponse:
    required:
      - id
      - symbol
      - base
      - quote
      - info
      - lot
      - limits
      - precision
    properties:
      id:
        type: string
        description: The unique identifier for this market
      symbol:
        type: string
        description: A unified way of referencing this Market. When a symbol parameter is needed in one of the APIs, this iis where you will get it.
      base:
        type: string
        description: The base currency. Given 'BTC/USD', the base is 'BTC'
      quote: 
        type: string
        description: The quote currency. Given 'BTC/USD', the quote is 'USD'
      info:
        type: object
        description: Raw market response gotten from the exchange site's API
      lot:
        type: number
        description: When placing an order, its amount must be divisible by this lot value
      limits:
        $ref: '#/definitions/Limits'
        description: The limits associated to this exchange
      precision:
        $ref: '#/definitions/Precision'
        description: The precision of the values of this exchange
  Limits:
    required:
      - amount
      - price
      - cost
    properties:
      amount:
        $ref: '#/definitions/Limit'
        description: The mininum and maximum allowable amount when placing an order
      price:
        $ref: '#/definitions/Limit'
        description: The mininum and maximum allowable price when placing an order
      cost:
        $ref: '#/definitions/Limit'
        description: 'The mininum and maximum allowable cost when placing an order (note: cost is amount x price)'
  Limit:
    required:
      - min
      - max
    properties:
      min:
        type: number
        description: The minimum allowable value
      max:
        type: number
        description: The maximum allowable value
  Precision:
    required:
      - amount
      - price
    properties:
      amount:
        type: number
        description: The allowable precision of the amount when placing an order. For example, given 2, then an amount of 0.123 must be made either 0.12 (or 0.13)
      price:
        type: number
        description: The allowable precision of the amount when placing an order. For example, given 2, then a price of 0.123 must be made either 0.12 (or 0.13)
  OrderBookResponse:
    required:
      - bids
      - asks
    properties:
      bids:
        type: array
        description: The publicly listed buy orders
        items: 
          $ref: "#/definitions/OrderBookLevel"
      asks:
        type: array
        description: The publicly listed sell orders
        items: 
          $ref: "#/definitions/OrderBookLevel"
      timestamp:
        type: number
        description: The timestamp associated for this order book
      datetime:
        type: string
        format: date-time
        description: The timestamp associated for this order book
  OrderBookLevel:
    required:
      - price
    properties:
      price:
        type: number
        description: The price being asked for. If this is a bid, then this is the amount the bidder is willing to buy. If this is a sell, then this is the amount the seller is willing to sell for.
      amount:
        type: number
        description: The amount of units being sold. 
  TradeResponse:
    required:
      - info
      - symbol
      - side
      - price
      - amount
    properties:
      id:
        type: string
        description: The unique identifier of the exchange for this trade
      info:
        type: object
        description: Raw trade response gotten from the exchange site's API
      timestamp:
        type: number
        format: date-time
        description: The timestamp of this trade
      symbol:
        type: string
        description: The currency pair of this trade
      side:
        type: string
        enum: *Side
        description: Whether this trade was a bid or ask (i.e. buy or sell)
      price:
        type: number
        description: The price of this trade
      amount:
        type: number
        description: The amount of this trade
  TickerResponse:
    required:
      - symbol
      - timestamp
      - datetime
      - high
      - low
      - bid
      - ask
      - vwap
      - close
      - last
      - baseVolume
      - quoteVolume
      - info
    properties:
      symbol:
        type: string
        description: The currency pair of this tick
      timestamp:
        type: number
        description: The timestamp of this tick
      datetime:
        type: string
        format: date-time
        description: The datetime of this tick
      high:
        type: number
        description: The higest price of this tick
      low:
        type: number
        description: The lowest price of this tick
      bid:
        type: number
        description: The current bid price of this tick
      ask:
        type: number
        description: The current ask price of this tick
      vwap:
        type: number
        description: The volume weighted average price of this tick
      close:
        type: number
        description: The closing price of this tick
      last:
        type: number
        description: The last price of this tick
      baseVolume:
        type: number
        description: The volume of the base currency of this tick
      quoteVolume:
        type: number
        description: The volume of the quote currency of this tick
      info:
        type: object
        description: Raw ticker response gotten from the exchange site's API
  BalanceResponse:
    required:
      - info
      - balances
    properties:
      info:
        type: object
        description: Raw balance response gotten from the exchange site's API
      balances:
        type: array
        description: List of balances per currency that you own
        items: 
          $ref: "#/definitions/BalanceInfo"
  BalanceInfo:
    required:
      - currency
      - free
      - used
      - total
    properties:
      currency:
        type: string
        description: The currency at which this balance refers to
      free:
        type: number
        description: The amount of currency that is free to used
      used:
        type: number
        description: The amount of currency that is currently used
      total:
        type: number
        description: The total amount of currency (free + used)
  OrderResponse:
    required:
      - id
    properties:
      id:
        type: string
        description: The unique identifier of the exchange for this order
      timestamp:
        type: number
        description: The timestamp of this order
      datetime:
        type: string
        format: date-time
        description: The datetime of this order
      symbol:
        type: string
        description: The currency pair of this order
      type:
        type: string
        enum: *OrderType
        description: Wether this is a market order or a limit order
      side:
        type: string
        enum: *Side
        description: Wether this is a bid or ask (i.e. buy or sell) order
      price:
        type: number
        description: The price of this order
      amount:
        type: number
        description: The amount of this order
      cost:
        type: number
        description: The cost of this order (i.e. price x amount)
      filled:
        type: number
        description: The amount of this order that is currently filled (i.e. this can be less than or equal to 'amount')
      remaining:
        type: number
        description: The amount of this order that is still yet to be filled (i.e. this can be less than or equal to 'amount')
      status:
        type: string
        enum: *OrderStatus
        description: The current status of this order
      info:
        type: object
        description: Raw order response gotten from the exchange site's API
