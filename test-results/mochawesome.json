{
  "stats": {
    "suites": 8,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2020-08-30T14:34:15.369Z",
    "end": "2020-08-30T14:34:15.899Z",
    "duration": 530,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "362801f4-88e6-4717-98eb-d9a5f42aa2c8",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "3e686050-c320-43ee-999e-df55846b6593",
        "title": "> controllers",
        "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
        "file": "/test/api/controllers/exchange.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "> controllers \"before all\" hook",
            "timedOut": false,
            "duration": 316,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (fs.existsSync('./out/database.sqlite3')) {\n  fs.unlinkSync('./out/database.sqlite3')\n}\nreturn new Promise((resolve) => {\n  ccxtServer.start(_server => {\n    server = _server\n    resolve();\n  })  \n})",
            "err": {},
            "isRoot": false,
            "uuid": "9a594ad4-5147-4f96-849e-ba75bd0fabf3",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "> controllers \"after all\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (server) {\n  server.close()\n}\nif (fs.existsSync('./out/database.sqlite3')) {\n  fs.unlinkSync('./out/database.sqlite3')\n}",
            "err": {},
            "isRoot": false,
            "uuid": "4781d657-51c9-4358-b5d5-d4f4be44c7fb",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "8ac30b27-12ec-4bcf-8ffa-782588a10bcb",
            "title": "> exchanges",
            "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
            "file": "/test/api/controllers/exchange.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "8c98964e-f711-44ea-b9fb-ce5fff2d4a21",
                "title": "> GET /exchanges",
                "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                "file": "/test/api/controllers/exchange.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "> should return list of exchanges",
                    "fullTitle": "> controllers > exchanges > GET /exchanges > should return list of exchanges",
                    "timedOut": false,
                    "duration": 36,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(server)\n          .get('/exchanges')\n          .expect('Content-Type', /json/)\n          .expect(200)\n          .end(function(err, res) {\n            should.not.exist(err);\n            res.body.should.eql(exchangeConfig.exchanges.map(i => '' + i));\n            done();\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "111d6bdf-16b9-4edc-b5d5-fd49de5cd4da",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "111d6bdf-16b9-4edc-b5d5-fd49de5cd4da"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 36,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "400fa02d-5b92-4d3d-9d82-84d4c692b47a",
            "title": "> exchange",
            "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
            "file": "/test/api/controllers/exchange.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "c25f4e33-0db5-4634-a6a3-2d85870ef3c7",
                "title": "> Given unsupported exchange name",
                "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                "file": "/test/api/controllers/exchange.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "984141d0-7169-48eb-bf79-bffe3b8f87c5",
                    "title": "> [Unsupported Exchange name] Exchange Management API",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange name] Exchange Management API > GET:/exchange/nonExistentExchangeName then return 404",
                        "timedOut": false,
                        "duration": 15,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .get('/exchange/nonExistentExchangeName')\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "934e452d-acad-419e-b689-bec79320a743",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> POST:/exchange/nonExistentExchangeName then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange name] Exchange Management API > POST:/exchange/nonExistentExchangeName then return 404",
                        "timedOut": false,
                        "duration": 25,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .post('/exchange/nonExistentExchangeName')\n  .send({id:'nonExistentExchangeName1'})\n  .set('Accept', 'application/json')\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "3eba4253-4e92-4180-810e-b297014dcc03",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "934e452d-acad-419e-b689-bec79320a743",
                      "3eba4253-4e92-4180-810e-b297014dcc03"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 40,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "c16148d3-21bb-4a54-b09f-681daa40d600",
                    "title": "> [Unsupported Exchange Name] Public Data API",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/markets then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/markets then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n              .get('/exchange/nonExistentExchangeName/markets')\n              .expect('Content-Type', /json/)\n              .expect(404)\n              .end((err, res) => {\n                should.not.exist(err);\n                done();\n              })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "2e7780f0-5190-4a07-8f9b-a63041d8304b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/orderBook then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/orderBook then return 404",
                        "timedOut": false,
                        "duration": 11,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS);\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/orderBook')\n    .query({ symbol: 'BTC/ETH' })\n    .set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "7af179b9-7c0e-4670-abdc-1ae8332c07be",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/l2OrderBook then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/l2OrderBook then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS);\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/l2OrderBook')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "f4a3da54-4b84-4617-938f-cc9d64f6e037",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/trades then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/trades then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/trades')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e3ffc89a-adf5-4268-9e57-2458601a3b75",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/ticker then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/ticker then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/ticker')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "43bb4189-e370-461c-a8b0-d68f75c31471",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/tickers then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/tickers then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/tickers')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "53992d72-f5ff-49ba-a0fb-7245331f6115",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> POST:/exchange/nonExistentExchangeName/_/loadMarkets then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > POST:/exchange/nonExistentExchangeName/_/loadMarkets then return 404",
                        "timedOut": false,
                        "duration": 11,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .post('/exchange/nonExistentExchangeName/_/loadMarkets')\n    .type('text')\n    .send(JSON.stringify([true]))\n    .set('Accept', 'application/json')\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "0995cbfb-a03c-4e43-baf1-30ed479e68e9",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "2e7780f0-5190-4a07-8f9b-a63041d8304b",
                      "7af179b9-7c0e-4670-abdc-1ae8332c07be",
                      "f4a3da54-4b84-4617-938f-cc9d64f6e037",
                      "e3ffc89a-adf5-4268-9e57-2458601a3b75",
                      "43bb4189-e370-461c-a8b0-d68f75c31471",
                      "53992d72-f5ff-49ba-a0fb-7245331f6115",
                      "0995cbfb-a03c-4e43-baf1-30ed479e68e9"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 56,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "e2683f7f-fc5e-4a20-8eb4-6a92c0f0912e",
                    "title": "> [Unsupported Exchange Name] Private Data APIs",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/balances then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > GET:/exchange/nonExistentExchangeName/balances then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/balances')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "940a3b0f-b321-4306-a7ff-d51c95bb1559",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Place order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Place order then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .post('/exchange/nonExistentExchangeName/order')\n  .send({ symbol: 'BTC/ETH', type: 'limit', side: 'buy', amount:0, price:0 })\n  .set('Accept', 'application/json')\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "04ca3cc1-c5d3-4417-93be-509aab2b9148",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Cancel order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Cancel order then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .delete('/exchange/nonExistentExchangeName/order/dummy')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "78183cb4-9b9c-435f-9943-8d3b552083b9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get order then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/order/dummy')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "85cec2b0-1ea0-4bd6-bef5-fd398f56dd84",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get orders then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5c58f41c-b1f4-4975-ad2c-7b9a4cc2b645",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get open orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get open orders then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders/open')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b48b8270-cacc-4b42-be9b-25400b0a82ef",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get closed orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get closed orders then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders/closed')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "ab5aa3d7-4504-469b-8a72-a3601718ed40",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get my trades then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get my trades then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/trades/mine')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1ebf31ae-167d-44e5-a0c7-136ff72d9c4c",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "940a3b0f-b321-4306-a7ff-d51c95bb1559",
                      "04ca3cc1-c5d3-4417-93be-509aab2b9148",
                      "78183cb4-9b9c-435f-9943-8d3b552083b9",
                      "85cec2b0-1ea0-4bd6-bef5-fd398f56dd84",
                      "5c58f41c-b1f4-4975-ad2c-7b9a4cc2b645",
                      "b48b8270-cacc-4b42-be9b-25400b0a82ef",
                      "ab5aa3d7-4504-469b-8a72-a3601718ed40",
                      "1ebf31ae-167d-44e5-a0c7-136ff72d9c4c"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 52,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2020
}